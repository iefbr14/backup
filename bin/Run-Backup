#!/usr/bin/perl -w

=head1 NAME

=head1 USAGE

=head1 REQUIRED ARGUMENTS

=head1 OPTION

=head1 DESCRIPTION

=head1 DIAGNOSTICS

=head1 EXIT STATUS

=head1 CONFIGURATION

=head1 DEPENDENCIES

Depends on rdiff-backup

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

Drew Sullivan

=head1 LICENSE COPYRIGHT

(c) Drew Sullivan 2013
Release under the GPL

=cut

#
# $Header: $
#

use strict;
use warnings;
use Getopt::Std;

use POSIX qw(strftime);
use File::Glob ':glob';
use File::Path qw(make_path);

sub usage {
	die <<"EOF";
Usage: $0 [options...] [args]...
   --
Options:
   -x     -- turn Debugging on.
   -d     -- dry run only
   -c     -- clean up archives

   -A     -- all sites auto
   -R     -- rotate logs

   -C :   -- Clean-up Age (90D)
EOF
}

my(%Opt);
getopts('xdcARC:', \%Opt) || usage;

my($Debug)   = $Opt{x} || 0;
my($Dryrun)  = $Opt{d} || 0;
my($Cleanup) = $Opt{c} || 0;

my($Allsite) = $Opt{A} || 0;
my($Rotate ) = $Opt{R} || 0;
my($Age)     = $Opt{C} || '90D';

if ( ! -d 'bin' ) {
	die "Please run in your backup directory."
}

my(@now) = localtime;
my($DOW) = strftime("%a", @now);
my($MON) = strftime("%b", @now);
my($DAY) = strftime("%d", @now);

open(LOG, '>/dev/null');	# no machine specific log to start

pdate("$DOW Backup") if $Allsite;

make_path('Logs', 'Old', 'Run', { verbose => 1, mode=> 0644 });


if ($Rotate) {
	rotate(<Logs/$DOW.*>);
#	rotate(<Logs/$MON.*>);
}

if ($Allsite && @ARGV == 0) {
	$Cleanup = ($DOW eq 'Sun');
	@ARGV = <*.*.*>;
}

if ($Cleanup) {
	clean_up(@ARGV);
}

for my $HOST (@ARGV) {
	backup($HOST);
}

pdate("$DOW Done") if $Allsite;

sub backup {
	my($machine) = @_;

	unless (open(LOG, ">> Logs/$DOW.$machine")) {
		warn "Can't log to: Logs/$DOW.$machine ($!)\n";
		return;
	}
		
	plog("# ==============[ $machine ]==============");

	if (! -d $machine) {
		perr("Back-up $machine not setup, skipping");
		return;
	}

	if (!$Cleanup && $Allsite && -M "$machine/rdiff-backup-data" < 0.4) {
		perr("Back-up $machine too soon ago, skipping");
		return;
	}


	plog("Start: $machine");

	unless (open(I, "Include/$machine")) {
		perr("Can't open include list: Include/$machine ($!)");
		return;
	}
	unless (open(O, "> Run/$machine")) {
		perr("Can't open include list: Run/$machine ($!)");
		return;
	}
	
	my(@FORCE) = ();

	if ( ! -d "$machine/rdiff-backup-data" ) {
		@FORCE = ('--force');
	}
	if ( -f "Include/$machine.force" ) {
		@FORCE = ('--force');
	}

	umask(000);

	my(%mp);

	my($mode, $mp);
	while (<I>) {
		next if /^\s*$/;
		next if /^\s*#/;


		chomp;
		($mode, $mp) = split(' ', $_);

		if ($mode eq '/') {
			print O "+ $mp/\n";
		} elsif ($mode eq '+') {
			print O "+ $mp\n";
		} else {
			print O "$mp\n";
		}

		$mp{$mp} = [ $mode ];

		print "# B $mode $mp\n" if $Debug;
	}
	close(I);


	unless (open(I, "ssh root\@$machine 'cat /proc/mounts'|")) {
		perr("Can't ssh $machine to get mounts");
		return;
	}

	while (<I>) {
		chomp;
		my ($fs, $mp, $type, @rest) = split(' ');

		my($guess) = guess_mode($type);

		print "# L $guess $mp # $type\n" if $Debug;

		next if $mp eq '/';

		# if we already have this one.
		next if defined $mp{$mp}[0];

		perr("Mount point $mp => $fs => $type @rest new");
		plog("Logically added: - $mp");
		$mode = '-';
		print O "$mp\n";
	}

	if ($mode ne '-') {
		perr("Last item in Include/$machine is not an exclude (rdiff-bug)");
		print O "/tmp/rdiff-bug-needs-excludes-as-last\n";
	}

#	print O "/\n";
	close(O);

	# the order of the excludes are very important here.
	# --exclude-other-filesystem is need after globbing
	# or globbing will not cross fs boundaries
	run('rdiff-backup', @FORCE, 
		'--exclude-sockets',
		'--exclude-globbing-filelist', "Run/$machine",
		'--exclude-other-filesystems',
		'--print-statistics',
		$machine."::/", $machine
	);
		
	if (@FORCE) {
		if ($Dryrun) {
			plog("# rm Include/$machine.force");
		} else {
			unlink("Include/$machine.force");
		}
	}

	pdate("Finish");
}

sub guess_mode {
	my($type) = @_;

	# synthetic
	return '-' if $type eq 'proc';
	return '-' if $type eq 'sysfs';
	return '-' if $type eq 'tmpfs';
	return '-' if $type eq 'devtmpfs';
	return '-' if $type eq 'devpts';
	return '-' if $type eq 'usbfs';
	return '-' if $type eq 'binfmt_misc';
	return '-' if $type eq 'rpc_pipefs';
	return '-' if $type eq 'fusectl';
	return '-' if $type eq 'debugfs';
	return '-' if $type eq 'securityfs';
	return '-' if $type eq 'selinuxfs';
	return '-' if $type eq 'autofs';
	return '-' if $type eq 'fuse.gvfs-fuse-daemon';

	# remote
	return '-' if $type eq 'nfs';
	return '-' if $type eq 'nfsd';
	return '-' if $type eq 'nfs4';

	return '*' if $type eq 'rootfs';

	return '+' if $type eq 'ext2';
	return '+' if $type eq 'ext3';
	return '+' if $type eq 'ext4';

	perr("Unknown type: $type");
	return '-';
}

sub rotate {
	for my $log (@_) {
		my($to) = $log; $to =~ s/^Logs/Old/;

		if ($Dryrun) {
			print "# LOG: $log => $to\n";
		} else {
			print "+ mv LOG $log => $to\n";

			rename($log, $to) or warn "Can't rename $log => $to\n";
		}
	}
}


sub clean_up {
	open(LOG, ">> Logs/$MON.$DAY.Clean-Up.log");

	plog("Space before:");
	run("df", "-h", ".");
	plog("");

	for my $HOST (@_) {
		clean_host($HOST);
	}

	plog("======================= Finish ======================");
	pdate("Finish Cleanup");
	plog("Space after:");
	run("df", "-h", ".");
	plog("");

	close(LOG);
}

sub clean_host {
	my($host) = @_;

	plog("======================= $host ======================");
	if ( ! -d "$host" ) {
		perr("No such directory $host -- not cleaned");
		return;
	}

	if ( ! -d "$host/rdiff-backup-data" ) {
		perr("Not a backup $host -- not cleaned");
		return;
	}

	pdate("Start clean-up");
	plog("=---------------------- $host ----------------------");
	run('rdiff-backup', '--force', '--remove-older-than', $Age, $host); 
}

sub run {
	my($cmd) = join(' ', @_);

	plog("+ $cmd");

	unshift(@_, 'bin/guard-cmd', '-w', '-l', 'backup');

	my($cmd) = join(' ', @_);


	if ($Dryrun) {
		plog("## $cmd");
		return;
	}

	print "++ $cmd\n" if $Debug;

	unless (open(CMD, "$cmd 2>&1 |")) {
		perr("Can't run $cmd ($!)");
		return;
	}
	while (<CMD>) {
		chomp;
		plog($_);
	}
	close(CMD);
	return if $? == 0;

	perr("Command failed: rc = $?");
}

sub plog {
	print LOG @_, "\n";
	print @_, "\n";
}

sub perr {
	print LOG    @_, "\n";
	print '!!! ', @_, "\n";
}

sub pdate {
	my($msg) = @_;

	plog("# $msg: ".strftime("%Y-%m-%d.%T", localtime));
}
